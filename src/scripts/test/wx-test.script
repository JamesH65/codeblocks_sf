
::Include(_("test_base.script"));

class wxTest extends script_test_base
{
    function Run()
    {
        test_test();
        test_wxstring();
        test_wxcolor();
        test_wxarray_string();
        test_wxfilename();
        test_dialogs();
    }

    function test_test()
    {
        ::print("======= Test Test environment BEGINN ======= \n");
        clear_test_result();
        ::print(" this is intended to fail: \n");
        test_string("test_string","hallo","nope");
        print_test_result();
        ::print("======= Test Test environment END ======= \n");
    }

    function test_wxstring()
    {
        ::print("======= Test wx String BEGINN ======= \n");
        clear_test_result();

        local string = wxString("Hallo");
        test_string("tostring",string,"Hallo");
        test_false("IsEmpty",string.IsEmpty());
        test_equal("Length",string.Length(),5);
        test_equal("length",string.length(),5);
        test_equal("len",string.len(),5);
        test_equal("size",string.size(),5);
        test_string("Lower",string.Lower(),"hallo");
        string.LowerCase();
        test_string("LowerCase",string,"hallo");
        test_string("MakeLower",string.MakeLower(),"hallo");
        test_string("Upper",string.Upper(),"HALLO");
        string.UpperCase();
        test_string("UpperCase",string,"HALLO");
        test_string("MakeUpper",string.MakeUpper(),"HALLO");
        string = wxString("Hallo");
        test_string("Mid",string.Mid(2,2),"ll");
        test_string("Remove",string.Remove(2,string.len()-2),"Ha");
        string = wxString("Hallo");
        test_string("RemoveLast",string.RemoveLast(2),"Hal");
        string = wxString("Hallo");
        test_equal("Replace ret",string.Replace(_("ll"),_("xx")),1);
        test_string("Replace value",string,"Haxxo");
        string = wxString("Hallo");
        test_string("AfterFirst",string.AfterFirst("l"),"lo");
        string = wxString("Hallo");
        test_string("AfterLast",string.AfterLast("l"),"o");
        string = wxString("Hallo");
        test_string("BeforeFirst",string.BeforeFirst("l"),"Ha");
        string = wxString("Hallo");
        test_string("BeforeLast",string.BeforeLast(_T("l")),"Hal");
        string = wxString("Hallo");
        test_string("Right",string.Right(2),"lo");
        string = wxString("Hallo");
        test_true("Matches",string.Matches(_T("Ha*o")));

        print_test_result();
        ::print("======= Test wx String END ======= \n");
    }

    function test_wxcolor()
    {
        ::print("======= Test wx Color BEGINN ======= \n");
        clear_test_result();
        local color = wxColour(42,43,44);
        test_string("tostring",color,"[r=42, g=43, b=44]");
        test_equal("Red",color.Red(),42);
        test_equal("Green",color.Green(),43);
        test_equal("Blue",color.Blue(),44);
        test_true("IsOK",color.IsOk());

        color.Set(52,53,54,255);
        test_string("Set",color,"[r=52, g=53, b=54]");

        print_test_result();
        ::print("======= Test wx Color END  ======= \n");
    }

    function test_wxarray_string()
    {
        ::print("======= Test wxArrayString BEGINN ======= \n");
        clear_test_result();
        local array;
        try
        {
            array = wxArrayString();
        } catch  (err)
        {
            failed("constructor"," ");
            return;
        }
        passed("constructor");


        array.Add(_T("String1"),1);
        array.Add(_T("String2"),2);
        test_equal("Add",array.Add(_T("String3"),1),3);
// FIXME (bluehazzard#1#): specialize the var<wsString> and remove the _T
        test_equal("GetCount",array.GetCount(),4);
        test_equal("Index(\"String1\")", array.Index(_T("String1")),0);
        test_equal("Index(\"String10\")", array.Index(_T("String10")),-1);
        test_equal("Index(\"string1\",true,false)", array.Index(_T("string10"),true,false),-1);
        test_equal("Index(\"string1\",false,false)", array.Index(_T("string1"),false),0);
        test_equal("Index(\"string2\",false,false)", array.Index(_T("string2"),false,false),1);
        test_equal("Index(\"string2\",false,true)", array.Index(_T("string2"),false,true),2);
        test_string("Item", array.Item(2),"String2");
        array.Clear();
        test_equal("Clear",array.GetCount(),0);

        print_test_result();
        ::print("======= Test wxArrayString END  ======= \n");
    }

    function test_wxfilename()
    {
               ::print("======= Test wxFileName BEGINN ======= \n");
        clear_test_result();
        local filename;
        try
        {
            filename = wxFileName();
        } catch  (err)
        {
            failed("constructor"," ");
            return;
        }
        passed("constructor");

        local path;
        if(PLATFORM == PLATFORM_MSW )
        {
            path = "\\share\\codeblocks\\"
        }
        else if(PLATFORM == PLATFORM_GTK)
        {
            path = "share/codeblocks/";
        }
        else
        {
            failed("Assign","Your operating system is not supported in this test script. Please add a test case. Thank you.");
            return;
        }
        ::print("Use path: " + path + "\n");
        filename.Assign(_T(path),wxPATH_NATIVE);
        test_string("Assign",filename,path);
        test_equal("GetDirCount",filename.GetDirCount(),2);
        test_equal("GetDirs",filename.GetDirs().GetCount(),2);

        filename.Clear();
        test_string("Clear",filename,"");
        filename.AssignCwd(_T(" "));
        ::print("Test: AssignCwd = " + filename " \n");
        passed("AssignCwd ????");
        filename.Clear();
        filename.AssignHomeDir();
        ::print("Test: AssignHomeDir = " + filename " \n");
        passed("AssignHomeDir ????");
        filename.Clear();
        filename.Assign(path+"tips.txt");
        test_string("GetExt",filename.GetExt(),"txt");
        test_string("GetFullName",filename.GetExt(),"tips.txt");
        test_string("GetFullPath",filename.GetFullPath(),path+"tips.txt");
        ::print("Test: GetLongPath = " + filename.GetLongPath() " \n");
        passed("GetLongPath ????");
        test_string("GetName",filename.GetName(),"tips");
        ::print("Test: GetPath = " + filename.GetPath(0,wxPATH_NATIVE) " \n");
        passed("GetPath ????");
        ::print("Test: GetShortPath = " + filename.GetShortPath() " \n");
        passed("GetShortPath ????");
        ::print("Test: GetVolume = " + filename.GetVolume() " \n");
        passed("GetVolume ????");
        test_true("HasExt",filename.HasExt());
        test_true("HasName",filename.HasName());
        test_true("HasVolume",filename.HasVolume());
        test_false("IsAbsolute",filename.IsAbsolute());
        test_true("IsOk",filename.IsOk());
        test_true("IsRelative",filename.IsRelative());
        test_false("IsDir",filename.IsDir());

        print_test_result();
        ::print("======= Test wxFileName END  ======= \n");
    }

    function test_dialogs()
    {

    }
};
