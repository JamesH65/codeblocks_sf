

class wxTest extends script_test_base
{
    function Run()
    {
        test_test();
        test_wxstring();
        test_wxstring_unicode();
        test_wxcolor();
        test_wxarray_string();
        test_wxfilename();
        test_wxpoint();
        test_wxsize();
        test_dialogs();
		test_globals();
		test_constants();
		
        print("\n\n **** wx TEST results ****\n");
		print_global_test_result();
		print("\n\n\n");
    }

    function test_test()
    {
        /*::print("======= Test Test environment BEGINN ======= \n");
        clear_test_result();
        ::print(" this is intended to fail: \n");
        test_string("test_string","hallo","nope");
        print_test_result();
        ::print("======= Test Test environment END ======= \n");*/
    }

    function test_wxstring()
    {
        ::print("======= Test wx String BEGINN ======= \n");
        clear_test_result();

        local string = _T("Hallo");
        if(test_string("tostring",string,"Hallo") == true)
            made_passed("constructor(SQchar)");
        else
            made_failed("constructor(SQchar)","see previous result");


        test_false("IsEmpty",string.IsEmpty());
        test_equal("Length",string.Length(),5);
        test_equal("length",string.length(),5);
        test_equal("len",string.len(),5);
        test_equal("size",string.size(),5);
        test_string("Lower",string.Lower(),"hallo");
        string.LowerCase();
        test_string("LowerCase",string,"hallo");
        test_string("MakeLower",string.MakeLower(),"hallo");
        test_string("Upper",string.Upper(),"HALLO");
        string.UpperCase();
        test_string("UpperCase",string,"HALLO");
        test_string("MakeUpper",string.MakeUpper(),"HALLO");
        string = _T("Hallo");
        test_string("Mid",string.Mid(2,2),"ll");
        test_string("Remove",string.Remove(2,string.len()-2),"Ha");
        string = _T("Hallo");
        test_string("RemoveLast",string.RemoveLast(2),"Hal");
		string = _T("Hallo");
		test_string("insert",string.insert(1,"test"),"Htestallo");
		string = _T("Hallo");
		test_equal("Cmp (Hallo == Hallo)" ,string.Cmp("Hallo"),0);
		test_func("Cmp (Hallo == Halla)" ,string.Cmp("Halla"),function(nr){return (nr!=0)} );
		test_equal("CmpNoCase (Hallo == HALLO)" ,string.CmpNoCase("HALLO"),0);
		test_func("CmpNoCase (Hallo == HALLA)",string.CmpNoCase("HALLA"),function(nr){return (nr!=0)});
		string = _T("Hallo");
		test_string("replace(size_t,size_t,string)",string.replace(1,2,"xxxxx"),"Hxxxxxlo");
		string = _T("Hallo");
		test_string("replace(size_t,size_t,string,size_t,size_t)",string.replace(1,2,"abcd",2,3),"Hcdlo");
		
        string = _T("Hallo");
        test_equal("Replace ret",string.Replace(_("ll"),_("xx")),1);
        test_string("Replace value",string,"Haxxo");
        string = _T("Hallo");
        test_string("AfterFirst",string.AfterFirst(_T("l")),"lo");
        string = _T("Hallo");
        test_string("AfterLast",string.AfterLast(_T("l")),"o");
        string = _T("Hallo");
        test_string("BeforeFirst",string.BeforeFirst(_T("l")),"Ha");
        string = _T("Hallo");
        test_string("BeforeLast",string.BeforeLast(_T("l")),"Hal");
        string = _T("Hallo");
        test_string("Right",string.Right(2),"lo");
        string = _T("Hallo");
        test_true("Matches",string.Matches(_T("Ha*o")));
		test_equal("GetChar",string.GetChar(2),'l');
		test_string("AddChar",string.AddChar("a"),"Halloa");
		string = _T("Hallo");
		test_equal("Find",string.Find("a"),1);
        string = _T("42");
        local ret_val = string.ToInt(10);
        if(!ret_val.success)
            made_failed("ToInt","it was no success");
        test_equal("ToInt",ret_val.value,42);
        
		string = wxString("2147483647");
        local ret_val = wxString_ToLong(string);
        if(!ret_val.success)
            made_failed("wxString_ToLong","it was no success");
        test_equal("wxString_ToLong",ret_val.value,2147483647);
		
		string = _T("42.42");
        ret_val = string.ToDouble();
        if(!ret_val.success)
            made_failed("ToDouble","it was no success");
        test_equal("ToDouble",ret_val.value,42.42);
		
		test_string("_T()",_T("Hallo"),"Hallo");
		test_string("wxT()",wxT("Hallo"),"Hallo");
		test_string("_()",_("Hallo"),"Hallo");
		
        print_test_result();
        ::print("======= Test wx String END ======= \n");
    }

    function test_wxstring_unicode()
    {
        clear_test_result();
        ::print("======= Test wx String unicode BEGINN ======= \n");
        ::print("test string: !5Aa ЉЩщӃ ウインカリ\n");

       local string = _T("!5Aa ЉЩщӃ ウインカリ");
       if(test_string("tostring",string,"!5Aa ЉЩщӃ ウインカリ") == true)
           made_passed("constructor(SQchar)");
       else
           made_failed("constructor(SQchar)","see previous result");
 
       local string2 = _T(string);
       if(test_string("tostring",string2,"!5Aa ЉЩщӃ ウインカリ") == true)
           made_passed("constructor(_T)");
       else
           made_failed("constructor(_T)","see previous result");
 
       string2 = _T(42);
       if(test_string("tostring",string2,"42") == true)
           made_passed("constructor(42)");
       else
           made_failed("constructor(42)","see previous result");
 
       string2 = _T(42.42);
       if(test_string("tostring",string2,"42.42") == true)
           made_passed("constructor(42.42)");
       else
           made_failed("constructor(42.42)","see previous result");
 
       test_false("IsEmpty",string.IsEmpty());
       test_equal("Length",string.Length(),15);
       test_equal("length",string.length(),15);
       test_equal("len",string.len(),15);
       test_equal("size",string.size(),15);
       string = _T("!5Aa ЉЩщӃ ウインカリ");
       test_string("RemoveLast",string.RemoveLast(2),"!5Aa ЉЩщӃ ウイン");
       string = _T("!5Aa ЉЩщӃ ウインカリ");
       test_equal("Replace ret",string.Replace(_("Љ"),_("ウ")),1);
       test_string("Replace value",string,"!5Aa ウЩщӃ ウインカリ");
       string = _T("!5Aa ЉЩщӃ ウインカリ");
       test_string("AfterFirst",string.AfterFirst("ウ"),"インカリ");
       string = _T("!5Aa ЉЩщӃ ウインカリ");
       test_string("AfterFirst const",string.AfterFirst('5'),"Aa ЉЩщӃ ウインカリ");
       string = _T("!5Aa ЉЩщӃ ウインカリ");
       test_string("AfterLast",string.AfterLast("щ"),"Ӄ ウインカリ");
 
 
        print_test_result();
        ::print("======= Test wx String unicode END ======= \n");
    }

    function test_wxcolor()
    {
        ::print("======= Test wx Color BEGINN ======= \n");
        clear_test_result();
        local color = wxColour();
        local fail_color = wxColour();
        color.Set(52,53,54,255);
        test_string("Set",color,"[r=52, g=53, b=54]");
        test_string("tostring",color,"[r=52, g=53, b=54]");
        test_equal("Red",color.Red(),52);
        test_equal("Green",color.Green(),53);
        test_equal("Blue",color.Blue(),54);
        test_true("IsOK true",color.IsOk());
        test_false("IsOK false",fail_color.IsOk());
		color = wxColour(10,20,30)
		test_string("constructor",color,"[r=10, g=20, b=30]");

        print_test_result();
        ::print("======= Test wx Color END  ======= \n");
    }

    function test_wxarray_string()
    {
        ::print("======= Test wxArrayString BEGINN ======= \n");
        clear_test_result();
        local array;
        try
        {
            array = wxArrayString();
        } catch  (err)
        {
            made_failed("constructor"," ");
            return;
        }
        made_passed("constructor");


        array.Add(_T("String1"),1);
        array.Add(_T("String2"),2);
        test_equal("Add",array.Add(_T("String3"),1),3);
		test_string("tostring", array.tostring(), "[String1 , String2 , String2 , String3]");
        test_equal("GetCount",array.GetCount(),4);
        test_equal("Index(\"String1\")", array.Index(_T("String1")),0);
        test_equal("Index(\"String10\")", array.Index(_T("String10")),-1);
        test_equal("Index(\"string1\",true,false)", array.Index(_T("string10"),true,false),-1);
        test_equal("Index(\"string1\",false,false)", array.Index(_T("string1"),false),0);
        test_equal("Index(\"string2\",false,false)", array.Index(_T("string2"),false,false),1);
        test_equal("Index(\"string2\",false,true)", array.Index(_T("string2"),false,true),2);
        test_string("Item", array.Item(2),_T("String2"));
		
		

        // Test if modifying the result of Item doesn't change the value in the array.
        local itemValue = array.Item(2);
        itemValue = _T("String2 modified");
        test_string("Item after modify", array.Item(2),_T("String2"));

        // Test SetItem.
        array.SetItem(2, _T("String2 modified"));
        test_string("SetItem", array.Item(2),_T("String2 modified"));

        array.Clear();
        test_equal("Clear",array.GetCount(),0);

        print_test_result();
        ::print("======= Test wxArrayString END  ======= \n");
    }

    function test_wxfilename()
    {
               ::print("======= Test wxFileName BEGINN ======= \n");
        clear_test_result();
        local filename;
        try
        {
            filename = wxFileName();
        } catch  (err)
        {
            made_failed("constructor"," ");
            return;
        }
        made_passed("constructor");

        local path;
		local msw_path = wxFileName();
		local unix_path = wxFileName();
        path = _T("C:\\share\\codeblocks\\");
		msw_path.Assign(path,wxPATH_NATIVE);
		path = _T("share/codeblocks/");
		unix_path.Assign(path,wxPATH_NATIVE);
		
        ::print("Use path: " + path + "\n");
        filename.Assign(path,wxPATH_NATIVE);
		if(PLATFORM == PLATFORM_MSW)
		{
			test_string("tostring",filename,"share\\codeblocks\\");
			test_string("Assign",filename,"share\\codeblocks\\");
		} else if (PLATFORM == PLATFORM_GTK)
		{
			test_string("tostring",filename,"share/codeblocks/");
			test_string("Assign",filename,"share/codeblocks/");	
		}
        test_equal("GetDirCount",filename.GetDirCount(),2);
        test_equal("GetDirs",filename.GetDirs().GetCount(),2);

        filename.Clear();
        test_string("Clear",filename,"");
        //filename.AssignCwd(_T(" "));
        ::print("Test: AssignCwd = " + filename + " \n");
        not_impl("AssignCwd");
        filename.Clear();
        filename.AssignHomeDir();
        ::print("Test: AssignHomeDir = " + filename +" \n");
        not_impl("AssignHomeDir");
        filename.Clear();
        filename.Assign(path + _T("tips.txt"),wxPATH_NATIVE);
        test_string("GetExt",filename.GetExt(),"txt");
        test_string("GetFullName",filename.GetFullName(),"tips.txt");
        test_string("GetFullPath UNIX",filename.GetFullPath(wxPATH_UNIX), "share/codeblocks/tips.txt");
        test_string("GetFullPath MSW",filename.GetFullPath(wxPATH_WIN), "share\\codeblocks\\tips.txt");
        ::print("Test: GetLongPath = " + filename.GetLongPath() +" \n");
        not_impl("GetLongPath");
		::print("Test: GetShortPath = " + filename.GetShortPath() + " \n");
        not_impl("GetShortPath");
        test_string("GetName",filename.GetName(),"tips");
        ::print("Test: GetPath = " + filename.GetPath(0,wxPATH_NATIVE) + " \n");
		test_string("GetPath unix",unix_path.GetPath(0,wxPATH_UNIX),"share/codeblocks");
		test_string("GetPath msw",msw_path.GetPath(0,wxPATH_WIN),"\\share\\codeblocks");
		test_true("HasVolume true",msw_path.HasVolume());
		test_false("HasVolume false",unix_path.HasVolume());
		test_string("GetVolume",msw_path.GetVolume(),"C");
        test_true("HasExt",filename.HasExt());
        test_true("HasName",filename.HasName());
        test_false("IsAbsolute",filename.IsAbsolute(wxPATH_NATIVE));
        test_true("IsOk",filename.IsOk());
        test_true("IsRelative",filename.IsRelative(wxPATH_NATIVE));
        test_false("IsDir",filename.IsDir());

        print_test_result();
        ::print("======= Test wxFileName END  ======= \n");
    }

    function test_wxpoint()
    {
        ::print("======= Test wxPoint BEGINN ======= \n");
        clear_test_result();

        local point1 = wxPoint();
        local point2 = wxPoint();
        local point3 = wxPoint();
        point1.x = 10;
        point1.y = 10;
        point2.x = 10;
        point2.y = 10;
        point3.x = 10;
        point3.y = 5;
		test_string("_tostring",point1,"[10,10]");
        test_false("compare false (" + point1 + " == " + point3 + ")" ,point1.Cmp(point3));
        test_true("compare self (" + point1 + " == " + point1 + ")",point1.Cmp(point1));
		test_true("compare true (" + point1 + " == " + point2 + ")",point1.Cmp(point2));
		test_false("test == instance ( point1 == point2)" ,point1 == point2);
		test_false("test == instance ( point1 == point3)" ,point1 == point3);
		test_true( "test == instance ( point1 == point1)" ,point1 == point1);
        print_test_result();
        ::print("======= Test wxPoint END  ======= \n");
    }

    function test_wxsize()
    {
        ::print("======= Test wxSize BEGINN ======= \n");
        clear_test_result();

        local point1 = wxSize();
        local point2 = wxSize();
        local point3 = wxSize();
        point1.Set(10,10);
        point2.Set(10,10);
        point3.Set(10,5);

        test_string("_tostring",point1,"[10,10]");
        test_true("Cmp true",point1.Cmp(point2));
        test_false("Cmp false",point1.Cmp(point3));
		test_true("Cmp self",point1.Cmp(point1));
        test_equal("GetWidth",point3.GetWidth(),10);
        test_equal("GetHeight",point3.GetHeight(),5);
        point3.SetWidth(23);
        point3.SetHeight(66);
        test_equal("SetWidth",point3.GetWidth(),23);
        test_equal("SetHeight",point3.GetHeight(),66);


        print_test_result();
        ::print("======= Test wxSize END  ======= \n");
    }

    function test_dialogs()
    {

    }
	
	function test_globals()
	{
		::print("======= Test globals BEGINN ======= \n");
        clear_test_result();
		::print("======= Test wxStopWatch ======= \n");
		local watch = wxStopWatch();
		watch.Start(0);
		for(local i = 0; i < 240876;)
			i++;
		watch.Pause();
		local time = watch.Time();
		if(time != 0)
		{
			made_passed("Start");
			made_passed("Stop");
			made_passed("Time");
		}
		else
		{
			made_failed("Start",time);
			made_failed("Stop",time);
			made_failed("Time",time);
		}
		watch.Resume();
		for(local i = 0; i < 240876;)
			i++;
		watch.Pause();
		local time2 = watch.Time();
		if(time2 > time)
			made_passed("Resume");
		else
			made_failed("Resume","No time passed after the last Resume()");
	
		
		print_test_result();
        ::print("======= Test wxSize END  ======= \n");
	}
	
	function test_constants()
	{
		::print("======= Test wx constants BEGINN ======= \n");
        clear_test_result();
	    test_if_in_const_table("wxFILE_SEP_PATH");
		// wxPathFormat
		test_if_in_const_table("wxPATH_NATIVE");
		test_if_in_const_table("wxPATH_UNIX");
		test_if_in_const_table("wxPATH_BEOS");
		test_if_in_const_table("wxPATH_MAC");
		test_if_in_const_table("wxPATH_DOS");
		test_if_in_const_table("wxPATH_WIN");
		test_if_in_const_table("wxPATH_OS2");
		test_if_in_const_table("wxPATH_VMS");

		// for wxFileName::GetPath("")
		test_if_in_const_table("wxPATH_GET_VOLUME");
		test_if_in_const_table("wxPATH_GET_SEPARATOR");

		// wxPathNormalize
		test_if_in_const_table("wxPATH_NORM_ENV_VARS");
		test_if_in_const_table("wxPATH_NORM_DOTS");
		test_if_in_const_table("wxPATH_NORM_TILDE");
		test_if_in_const_table("wxPATH_NORM_CASE");
		test_if_in_const_table("wxPATH_NORM_ABSOLUTE");
		test_if_in_const_table("wxPATH_NORM_LONG");
		test_if_in_const_table("wxPATH_NORM_SHORTCUT");
		test_if_in_const_table("wxPATH_NORM_ALL");

		// dialog buttons
		test_if_in_const_table("wxOK");
		test_if_in_const_table("wxYES_NO");
		test_if_in_const_table("wxCANCEL");
		test_if_in_const_table("wxID_OK");
		test_if_in_const_table("wxID_YES");
		test_if_in_const_table("wxID_NO");
		test_if_in_const_table("wxID_CANCEL");
		test_if_in_const_table("wxICON_QUESTION");
		test_if_in_const_table("wxICON_INFORMATION");
		test_if_in_const_table("wxICON_WARNING");
		test_if_in_const_table("wxICON_ERROR");
		test_if_in_const_table("wxICON_HAND");
		print_test_result();
        ::print("======= Test wx constants END  ======= \n");
	}
};
